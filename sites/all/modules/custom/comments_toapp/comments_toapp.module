<?php
function comments_toapp_form_alter(&$form, &$form_state, $form_id) { 
  if ($form['#form_id'] == 'comment_node_jobs_form') {
  }
  if (arg(0) == 'comment') {
    drupal_set_title('Application form');
    $form['actions']['submit']['#value'] = t('Apply');
  }
    // dsm($form);
  if ($form['#form_id'] == 'jobs_node_form') {

    if ($form['nid']['#value'] == NULL) {
      global $user;
      $u = user_load($user->uid);
      $DEP = $u->field_department['und'][0]['tid'];

      $form['field_department']['und']['#default_value'] = array(
        $DEP,
      );
      $form['field_department']['und']['#value'] = $DEP;
    }
  }
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-jobs-search-page'){
    $form['#attributes'] = array('class'=>array('form-horizontal search_form home-page'));
    
    // Set placeholders for known search fields
    $infos = $form['#info'];
    foreach ($infos as $key => $filter) {
      $label = $filter['label'];
      unset($form['#info'][$key]['label']);
      $form[$filter['value']]['#attributes'] = array('placeholder' => array($label));
    }
    
  }
}

/**
 * Implements hook_theme().
 */
function comments_toapp_theme($existing, $type, $theme, $path) {
  return array(
    "comment_form__node_jobs" => array(
      'render element' => 'form',
      'template' => "comment-form--node-jobs",
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function comments_toapp_node_view($node, $view_mode) {
  $links = array();

  if ($node->type == 'jobs') {
    if ($node->comment != COMMENT_NODE_HIDDEN) {
      if ($view_mode == 'rss') {
        // Add a comments RSS element which is a URL to the comments of this node.
        $node->rss_elements[] = array(
          'key' => 'comments',
          'value' => url('node/' . $node->nid, array(
              'fragment' => 'comments',
              'absolute' => TRUE,
            )),
        );
      }
      elseif ($view_mode == 'teaser') {
        // Teaser view: display the number of comments that have been posted,
        // or a link to add new comments if the user has permission, the node
        // is open to new comments, and there currently are none.
        if (user_access('access comments')) {
          if (!empty($node->comment_count)) {
            $links['comment-comments'] = array(
              'title' => format_plural($node->comment_count, '1 Application', '@count Applications'),
              'href' => "node/$node->nid",
              'attributes' => array(
                'title' => t('Be the first one to Apply.'),
              ),
              'fragment' => 'comments',
              'html' => TRUE,
            );
            // Show a link to the first new comment.
            if ($new = comment_num_new($node->nid)) {
              $links['comment-new-comments'] = array(
                'title' => format_plural($new, '1 Application', '@count Applications'),
                'href' => "node/$node->nid",
                'query' => comment_new_page_count($node->comment_count, $new, $node),
                'attributes' => array(
                  'title' => t('Be the first one to Apply.'),
                ),
                'fragment' => 'new',
                'html' => TRUE,
              );
            }
          }
        }
        if ($node->comment == COMMENT_NODE_OPEN) {
          if (user_access('post comments')) {
            $links['comment-add'] = array(
              'title' => t('Apply Now'),
              'href' => "comment/reply/$node->nid",
              'attributes' => array(
                'title' => t('Apply for this Job now.'),
              ),
              'fragment' => 'comment-form',
            );
          }
          else {
            $links['comment_forbidden'] = array(
              'title' => theme('comment_post_forbidden', array(
                  'node' => $node,
                )),
              'html' => TRUE,
            );
          }
        }
      }
      elseif ($view_mode != 'search_index' && $view_mode != 'search_result') {
        // Node in other view modes: add a "post comment" link if the user is
        // allowed to post comments and if this node is allowing new comments.
        // But we don't want this link if we're building the node for search
        // indexing or constructing a search result excerpt.
        if ($node->comment == COMMENT_NODE_OPEN) {
          $comment_form_location = variable_get('comment_form_location_' . $node->type, COMMENT_FORM_BELOW);
          if (user_access('post comments')) {
            // Show the "post comment" link if the form is on another page, or
            // if there are existing comments that the link will skip past.
            if ($comment_form_location == COMMENT_FORM_SEPARATE_PAGE || (!empty($node->comment_count) && user_access('access comments'))) {
              $links['comment-add'] = array(
                'title' => t('Apply now'),
                'attributes' => array(
                  'title' => t('Apply now'),
                ),
                'href' => "node/$node->nid",
                'fragment' => 'comment-form',
              );
              if ($comment_form_location == COMMENT_FORM_SEPARATE_PAGE) {
                $links['comment-add']['href'] = "comment/reply/$node->nid";
              }
            }
          }
          else {
            $links['comment_forbidden'] = array(
              'title' => theme('comment_post_forbidden', array(
                  'node' => $node,
                )),
              'html' => TRUE,
            );
          }
        }
      }

      $node->content['links']['comment'] = array(
        '#theme' => 'links__node__comment',
        '#links' => $links,
        '#attributes' => array(
          'class' => array(
            'links',
            'inline',
          ),
        ),
      );

      // Only append comments when we are building a node on its own node detail
      // page. We compare $node and $page_node to ensure that comments are not
      // appended to other nodes shown on the page, for example a node_reference
      // displayed in 'full' view mode within another node.
      if ($node->comment && $view_mode == 'full' && node_is_page($node) && empty($node->in_preview)) {
        $node->content['comments'] = comment_node_page_additions($node);
      }
    }
  }
}

/**
 * **
 * HOOK_views_query_alter
 */
function comments_toapp_views_query_alter(&$view, &$query) {
  if ($view->name == 'applications') {
    global $user;
    $u = user_load($user->uid);
    $DEP = $u->field_department['und'][0]['tid'];
    // dsm($u);
    // dsm($DEP);
    // Traverse through the 'where' part of the query.
    foreach ($query->where as & $condition_group) {
      foreach ($condition_group['conditions'] as & $condition) {
        // dsm($condition['field']);
        // condition to filter on USER DEPARTMENT.
        if ($condition['field'] == 'node_comment__field_data_field_department.field_department_tid') {
          $condition = array(
            'field' => 'node_comment__field_data_field_department.field_department_tid',
            'value' => $DEP,
            'operator' => '=',
          );
        }
      }
    }
  }
}

function comments_toapp_field_access($op, $field, $entity_type, $entity, $account) {
  global $user;
  if ($field['field_name'] == 'field_department' && $op == 'edit' && $entity_type == 'user') {
    if (in_array('administrator', $user->roles)) {
      // do fancy stuff
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
}

function comments_toapp_comment_view($comment) {
  global $user;
  if (!in_array('administrator', $user->roles)) {
    if ($comment->uid != $user->uid) {
      $u = user_load($user->uid);
      $DEP = $u->field_department['und'][0]['tid'];
      $node = node_load($comment->nid);
      $job_department = $node->field_department['und'][0]['tid'];
      $user_department = $DEP;
      if ($job_department != $user_department) {
        drupal_set_message(t('You are not allowed to see that particular content so we are redirecting you to this page'));
        drupal_goto('applications');
      }
    }
  }
}

